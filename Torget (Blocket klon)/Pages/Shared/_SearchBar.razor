@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc
@using Torget__Blocket_klon_.Data.ModelsNotInDb
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inherits ComponentBase

<div class="categories to-hide">
    <div class="category-single">
        <MudIconButton @ref="_elektronikIcon" OnClick="e => AssignCategory(_elektronikIcon,Categories.Elektronik)" Icon="fa-solid fa-computer"></MudIconButton>
        <p class="text-center">Elektronik</p>
    </div>
    <div class="category-single">
        <MudIconButton @ref="_fordonIcon" OnClick="e => AssignCategory(_fordonIcon, Categories.Fordon)" Icon="fa-solid fa-car"></MudIconButton>
        <p>Fordon</p>
    </div>
    <div class="category-single">
        <MudIconButton @ref="_hobbyIcon" OnClick="e => AssignCategory(_hobbyIcon, Categories.Hobby)" Icon="fa-solid fa-bicycle"></MudIconButton>
        <p>Hobby</p>
    </div>
    <div class="category-single">
        <MudIconButton @ref="_kläderIcon" OnClick="e => AssignCategory(_kläderIcon, Categories.Kläder)" Icon="fa-solid fa-shirt"></MudIconButton>
        <p>Kläder</p>
    </div>
    <div class="category-single">
        <MudIconButton @ref="_möblerIcon" OnClick="e => AssignCategory(_möblerIcon, Categories.Möbler)" Icon="fa-solid fa-chair"></MudIconButton>
        <p>Möbler</p>
    </div>
</div>

<EditForm Model="@SearchQuery" OnValidSubmit="@PerformSearch" class="filters">
    <div class="filter-search input">
        <InputText @bind-Value="SearchQuery.SearchWords" placeholder="Ex. Barnvagn, cykel" id="search"/>
        <i class="fa-solid fa-sliders"></i>
    </div>
    <div class="filter-location input">
        <MudSelect T="string" MultiSelection="true" @bind-SelectedValues="counties" Placeholder="Plats" id="location">
            @foreach (var county in allowedCounties)
            {
                <MudSelectItem T="string" Value="@county">@county</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div class="filter-price-lowest input">
        <InputNumber @bind-Value="SearchQuery.PriceLowest" placeholder="Min-pris" id="priceLowest"/>
    </div>
    <div class="filter-price-highest input">
        <InputNumber @bind-Value="SearchQuery.PriceHighest" placeholder="Max-pris" id="priceHighest"/>
    </div>
    <input class="filter-submit button" type="submit" value="Sök" />
</EditForm>

@code {
    public SearchQuery SearchQuery { get; set; } = new();
    [MaxLength(int.MaxValue)]
    private IEnumerable<string> counties = new HashSet<string>();

    private MudIconButton? _elektronikIcon;
    private MudIconButton? _fordonIcon;
    private MudIconButton? _hobbyIcon;
    private MudIconButton? _kläderIcon;
    private MudIconButton? _möblerIcon;

    enum Categories
    {
        Elektronik,
        Fordon,
        Hobby,
        Kläder,
        Möbler
    }

    private List<string> _categories = new List<string> {"Elektronik", "Fordon", "Hobby", "Kläder", "Möbler"};

    private string[] allowedCounties = {"Lerum", "Göteborg", "Stockholm"};

    private void AssignCategory(MudIconButton element, Categories categoryIndex)
    {
        _elektronikIcon.Style = "border: none;";
        _fordonIcon.Style = "border: none;";
        _hobbyIcon.Style = "border: none;";
        _kläderIcon.Style = "border: none;";
        _möblerIcon.Style = "border: none;";

        element.Style = "border: 2px solid black;";
        SearchQuery.Category = _categories[(int)categoryIndex];
    }
    

    private void PerformSearch()
    {
        if(counties.Count() != 0) 
            SearchQuery.Counties = counties.ToList();
            
        var route = new RedirectToPageResult("Annonser", SearchQuery);

        var url = CreateUrl(route);

        NavManager.NavigateTo(url, true);
    }

    private string CreateUrl(RedirectToPageResult route)
    {
        var url = new Uri(NavManager.BaseUri + route.PageName).AbsoluteUri;

        var keys = route.RouteValues.Keys.ToList();
        var values = route.RouteValues.Values.ToList();

        for (var i = 0; i < keys.Count; i++)
        {
            if (values[i] is null) continue;

            url = AddQuery(url, keys[i], values[i]);
        }
        return url;
    }

    private static string AddQuery(string url, string key, object valueObject)
    {
        if(valueObject.GetType() != typeof(List<string>))
            url = QueryHelpers.AddQueryString(url, key, valueObject.ToString());

        else
            url = ((List<string>) valueObject)
                .Aggregate(url, (currentUrl, value) => 
                    QueryHelpers.AddQueryString(currentUrl, key, value));

        return url;
    }
}